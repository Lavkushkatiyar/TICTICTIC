const WB = '⬜';
let CURR_POS = [1, 1];
let PREV_POS = [1, 1];
const WIN_POS = [9, 17];
const MAZE = [
  //  0     1     2    3     4     5    6   7    8     9    10    11    12   13    14   15    16    17    18   19 

  ['🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫'],
  ['⬜', '🚀', '⬜', '⬜', '🟫', '⬜', '🟫', '⬜', '⬜', '⬜', '🟫', '⬜', '⬜', '🟫', '⬜', '⬜', '⬜', '⬜', '🟫', '🟫'],
  ['🟫', '🟫', '🟫', '⬜', '🟫', '⬜', '🟫', '🟫', '🟫', '⬜', '🟫', '⬜', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫', '⬜', '🟫'],
  ['🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫', '⬜', '⬜', '⬜', '⬜', '🟫'],
  ['🟫', '⬜', '🟫', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫'],
  ['🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫'],
  ['🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫'],
  ['🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫', '⬜', '⬜', '⬜', '⬜', '⬜', '🟫'],
  ['🟫', '⬜', '🟫', '🟫', '🟫', '🟫', '⬜', '🟫', '⬜', '🟫', '🟫', '🟫', '⬜', '🟫', '⬜', '🟫', '🟫', '🟫', '⬜', '🟫'],
  ['🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🟫', '🏁', '🟫']
];
function displayMaze() {
  console.clear();
  console.log('\n');

  for (let row = 0; row < MAZE.length; row++) {
    console.log('\t\t\t\t', MAZE[row].join(''));
  }
}

displayMaze();

function findAllThePath(P1, P2, WIN_POS, MAZE, path) {
  if (P1 < 0 || P2 < 0 || P1 >= MAZE.length || P2 >= MAZE[0].length) return;
  if (P1 === WIN_POS[0] && P2 === WIN_POS[1]) {
    console.log(path.slice(0, path.length - 5) + "\n");
    return;
  }
  if (MAZE[P1][P2] === '🟫') return;
  MAZE[P1][P2] = '🟫';
  findAllThePath(P1, P2 + 1, WIN_POS, MAZE, path + "➡️ ");
  findAllThePath(P1 + 1, P2, WIN_POS, MAZE, path + " ⬇️ ");
  findAllThePath(P1 - 1, P2, WIN_POS, MAZE, path + " ⬆️ ");
  findAllThePath(P1, P2 - 1, WIN_POS, MAZE, path + " ⬅️ ");
  MAZE[P1][P2] = '⬜';
  return;
}
findAllThePath(CURR_POS[0], CURR_POS[1], WIN_POS, MAZE, '');
